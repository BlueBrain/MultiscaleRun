/*
Created by BluePyOpt(1.6.6) at 2017-11-22 15:52:00.831317
*/
{load_file("stdrun.hoc")}
{load_file("import3d.hoc")}
/*
* Check that global parameters are the same as with the optimization
*/
proc check_parameter(/* name, expected_value, value */){
strdef error
if($2 != $3){
sprint(error, "Parameter %s has different value %f != %f", $s1, $2, $3)
execerror(error)
}
}
proc check_simulator() {
check_parameter("celsius", 34, celsius)
check_parameter("v_init", -80, v_init)
}

begintemplate cNAC_L6NGC
public init, morphology, geom_nseg_fixed, geom_nsec, getCell, getCCell, setCCell, gid, getCell
public connect2target, clear, ASCIIrpt
public soma, dend, apic, axon, myelin, getThreshold
create soma[1], dend[1], apic[1], axon[1], myelin[1]
public nSecAll, nSecSoma, nSecApical, nSecBasal, nSecMyelinated, nSecAxonalOrig, nSecAxonal
public CellRef, synHelperList, synlist
objref this, CellRef, segCounts, ASCIIrpt, synHelperList, synlist

public all, somatic, apical, axonal, basal, myelinated, APC
objref all, somatic, apical, axonal, basal, myelinated, APC


obfunc getCell(){
return this
}

obfunc getCCell(){
return CellRef
}
proc setCCell(){
CellRef = $o1
}

//-----------------------------------------------------------------------------------------------

/*!
* When clearing the model, the circular reference between Cells and CCells must be broken so the
* entity watching reference counts can work.
*/
proc clear() { localobj nil
//CCellRef.CellRef = nil
CellRef = nil
}



/*!
* @param $o1 NetCon source (can be nil)
* @param $o2 Variable where generated NetCon will be placed
*/
proc connect2target() { //$o1 target point process, $o2 returned NetCon
soma $o2 = new NetCon(&v(1), $o1)
$o2.threshold = -30
}


proc init(/* args: morphology_dir, morphology_name */) {
all = new SectionList()
apical = new SectionList()
axonal = new SectionList()
basal = new SectionList()
somatic = new SectionList()
myelinated = new SectionList()

synHelperList = new List()
synlist = new List()

//For compatibility with BBP CCells
CellRef = this

forall delete_section()

gid = $1

if(numarg() >= 3) {
//print $s2, $s3
load_morphology($s2, $s3)
} else {
//print $1, $s2, " rp110125_L5-2_idA.asc ", " cNAC_L6NGC " , " static ", " {acceptable} ######\n"
load_morphology($s2, "rp110125_L5-2_idA.asc")
}

geom_nseg()
indexSections()
replace_axon()
insertChannel()
biophys()
re_init_rng()
}

/*!
* Assign section indices to the section voltage value.  This will be useful later for serializing
* the sections into an array.  Note, that once the simulation begins, the voltage values will revert to actual data again.
*
* @param $o1 Import3d_GUI object
*/
proc indexSections() { local index
index = 0
forsec all {
v(0.0001) = index
index = index +1
}
}

func getThreshold() { return 0.0 }

proc load_morphology(/* morphology_dir, morphology_name */) {localobj morph, import, sf, extension
strdef morph_path
sprint(morph_path, "%s/%s", $s1, $s2)

sf = new StringFunctions()
extension = new String()

sscanf(morph_path, "%s", extension.s)
sf.right(extension.s, sf.len(extension.s)-4)

if(strcmp(extension.s, ".ASC") == 0 ){
extension.s = ".asc"
sf.left(morph_path, sf.len(morph_path)-3)
sprint(morph_path,"%s%s",morph_path,"asc")
print "USING LOWERCASE EXTENSION", morph_path
}


if( strcmp(extension.s, ".asc") == 0 ) {
morph = new Import3d_Neurolucida3()
} else if( strcmp(extension.s, ".swc" ) == 0) {
morph = new Import3d_SWC_read()
} else {
printf(extension.s)
printf("Unsupported file format: Morphology file has to end with .asc or .swc" )
quit()
}

morph.quiet = 1
morph.input(morph_path)

import = new Import3d_GUI(morph, 0)
import.instantiate(this)
}

/*
* Assignment of mechanism values based on distance from the soma
* Matches the BluePyOpt method
*/
proc distribute_distance(){local x localobj sl
strdef stmp, distfunc, mech

sl = $o1
mech = $s2
distfunc = $s3
this.soma[0] distance(0, 0.5)
sprint(distfunc, "%%s %s(%%f) = %s", mech, distfunc)
forsec sl for(x, 0) {
sprint(stmp, distfunc, secname(), x, distance(x))
execute(stmp)
}
}

proc geom_nseg() {
this.geom_nsec() //To count all sections
//TODO: geom_nseg_fixed depends on segCounts which is calculated by
//  geom_nsec.  Can this be collapsed?
this.geom_nseg_fixed(40)
this.geom_nsec() //To count all sections
}

proc insertChannel() {
forsec this.all {
insert nakcc
insert leak
insert internal_ions
insert nakpump
pi0_p_ion = 4.1
adpi0_adp_ion = 6.3e-3
atpi0_atp_ion = 1.4
po0_p_ion = 0
adpo0_adp_ion = 0
atpo0_atp_ion = 0
nai0_na_ion = 10
cai0_ca_ion = 5e-5
nao0_na_ion = 140
cao0_ca_ion = 1.5
clo0_cl_ion = 130
cli0_cl_ion = 6
ko0_k_ion = 5
ki0_k_ion = 140
}
forsec this.apical {
insert kcc2
insert Ca_HVA2
insert Ca_LVAst
insert SK_E2
insert Ih
}
forsec this.axonal {
insert Ca_HVA2
insert Ca_LVAst
insert SK_E2
insert NaTg
insert SKv3_1
insert K_Pst
insert K_Tst
}
forsec this.basal {
insert kcc2
insert Ca_HVA2
insert Ca_LVAst
insert SK_E2
insert Ih
}
forsec this.somatic {
insert kcc2
insert Ca_HVA2
insert Ca_LVAst
insert SK_E2
insert NaTg
insert SKv3_1
insert K_Pst
insert K_Tst
insert Ih
}
forsec this.myelinated {
}
}

proc biophys() {

forsec CellRef.all {
Ra = 100
 v(1) = -65
}

forsec CellRef.apical {
cm = 1
gCa_HVAbar_Ca_HVA2 = 0.0002098820691456188
gCa_LVAstbar_Ca_LVAst = 0.00041915542424395414
gSK_E2bar_SK_E2 = 0.089493876945476419
}

forsec CellRef.axonal {
cm = 1
vshifth_NaTg = 10
slopem_NaTg = 9
gNaTgbar_NaTg = 0.92705512041742655
gK_Pstbar_K_Pst = 0.15344738619041767
gK_Tstbar_K_Tst = 0.14541338808085721
gSKv3_1bar_SKv3_1 = 1.3747679001555075
gCa_HVAbar_Ca_HVA2 = 0.00049991919727228838
gCa_LVAstbar_Ca_LVAst = 2.7185042495488903e-05
gSK_E2bar_SK_E2 = 0.097482384790666052
}

forsec CellRef.basal {
cm = 1
gCa_HVAbar_Ca_HVA2 = 0.0002098820691456188
gCa_LVAstbar_Ca_LVAst = 0.00041915542424395414
gSK_E2bar_SK_E2 = 0.089493876945476419
}

forsec CellRef.somatic {
cm = 1
gCa_HVAbar_Ca_HVA2 = 0.0002098820691456188
gCa_LVAstbar_Ca_LVAst = 0.00041915542424395414
vshiftm_NaTg = 13
vshifth_NaTg = 15
slopem_NaTg = 7
gNaTgbar_NaTg = 0.0082921756613743517
gK_Pstbar_K_Pst = 0.28807792497885248
gK_Tstbar_K_Tst = 0.097693103020792163
gSKv3_1bar_SKv3_1 = 0.5880869546939923
gSK_E2bar_SK_E2 = 0.04756093023378774
}

forsec CellRef.myelinated {
cm = 0.02
}

distribute_distance(CellRef.apical, "gIhbar_Ih", "(-0.8696 + 2.087*exp((%.17g)*0.0031))*4.9382200572942972e-06")
distribute_distance(CellRef.basal, "gIhbar_Ih", "(-0.8696 + 2.087*exp((%.17g)*0.0031))*4.9382200572942972e-06")
distribute_distance(CellRef.somatic, "gIhbar_Ih", "(-0.8696 + 2.087*exp((%.17g)*0.0031))*4.9382200572942972e-06")
distribute_distance(CellRef.somatic,"gKCC_kcc2","(0.0 * %g + 1.0)*0.000070000000000")
distribute_distance(CellRef.apical,"gKCC_kcc2","(0.0 * %g + 1.0)*0.000070000000000")
distribute_distance(CellRef.basal,"gKCC_kcc2","(0.0 * %g + 1.0)*0.000070000000000")
distribute_distance(CellRef.all,"g_leak","(0.0 * %g + 1.0)*0.000030000000000")
distribute_distance(CellRef.axonal,"gNKCC_nakcc","(0.0 * %g + 1.0)*0.000002000000000")
distribute_distance(CellRef.somatic,"gNKCC_nakcc","(0.0 * %g + 1.0)*0.000002000000000")
distribute_distance(CellRef.apical,"gNKCC_nakcc","(0.0 * %g + 1.0)*0.000002000000000")
distribute_distance(CellRef.basal,"gNKCC_nakcc","(0.0 * %g + 1.0)*0.000002000000000")
distribute_distance(CellRef.axonal,"decay_internal_ions","(0.0 * %g + 1.0)*10.000000000000000")
distribute_distance(CellRef.axonal,"gamma_internal_ions","(0.0 * %g + 1.0)*0.050000000000000")
distribute_distance(CellRef.somatic,"decay_internal_ions","(0.0 * %g + 1.0)*10.000000000000000")
distribute_distance(CellRef.somatic,"gamma_internal_ions","(0.0 * %g + 1.0)*0.050000000000000")
distribute_distance(CellRef.apical,"decay_internal_ions","(0.0 * %g + 1.0)*15.000000000000000")
distribute_distance(CellRef.apical,"gamma_internal_ions","(0.0 * %g + 1.0)*0.050000000000000")
distribute_distance(CellRef.basal,"decay_internal_ions","(0.0 * %g + 1.0)*15.000000000000000")
distribute_distance(CellRef.basal,"gamma_internal_ions","(0.0 * %g + 1.0)*0.050000000000000")
distribute_distance(CellRef.axonal,"totalpump_nakpump","(0.0 * %g + 1.0)*0.00000000000400")
distribute_distance(CellRef.somatic,"totalpump_nakpump","(0.0 * %g + 1.0)*0.000000000000400")
distribute_distance(CellRef.apical,"totalpump_nakpump","(0.0 * %g + 1.0)*0.00000000000200")
distribute_distance(CellRef.basal,"totalpump_nakpump","(0.0 * %g + 1.0)*0.00000000000200")
}

func sec_count(/* SectionList */) { local nSec
nSec = 0
forsec $o1 {
nSec += 1
}
return nSec
}

/*
* Iterate over the section and compute how many segments should be allocate to
* each.
*/
proc geom_nseg_fixed(/* chunkSize */) { local secIndex, chunkSize
chunkSize = $1
soma area(.5) // make sure diam reflects 3d points
secIndex = 0
forsec all {
nseg = 1 + 2*int(L/chunkSize)
segCounts.x[secIndex] = nseg
secIndex += 1
}
}

/*
* Count up the number of sections
*/
proc geom_nsec() { local nSec
nSecAll = sec_count(all)
nSecSoma = sec_count(somatic)
nSecApical = sec_count(apical)
nSecBasal = sec_count(basal)
nSecMyelinated = sec_count(myelinated)
nSecAxonalOrig = nSecAxonal = sec_count(axonal)

segCounts = new Vector()
segCounts.resize(nSecAll)
nSec = 0
forsec all {
segCounts.x[nSec] = nseg
nSec += 1
}
}

/*
* Replace the axon built from the original morphology file with a stub axon
*/

proc replace_axon(){ local nSec, L_chunk, dist, i1, i2, count, L_target, chunkSize, L_real localobj diams, lens

L_target = 60  // length of stub axon
nseg0 = 5  // number of segments for each of the two axon sections

nseg_total = nseg0 * 2
chunkSize = L_target/nseg_total

nSec = 0
forsec axonal{nSec = nSec + 1}

// Try to grab info from original axon
if(nSec < 3){ //At least two axon sections have to be present!

execerror("Less than three axon sections are present! This emodel can't be run with such a morphology!")

} else {

diams = new Vector()
lens = new Vector()

access axon[0]
axon[0] i1 = v(0.0001) // used when serializing sections prior to sim start
axon[1] i2 = v(0.0001) // used when serializing sections prior to sim start
axon[2] i3 = v(0.0001) // used when serializing sections prior to sim start

count = 0
forsec axonal{ // loop through all axon sections

nseg = 1 + int(L/chunkSize/2.)*2  //nseg to get diameter

for (x) {
if (x > 0 && x < 1) {
count = count + 1
diams.resize(count)
diams.x[count-1] = diam(x)
lens.resize(count)
lens.x[count-1] = L/nseg
if( count == nseg_total ){
break
}
}
}
if( count == nseg_total ){
break
}
}

// get rid of the old axon
forsec axonal{delete_section()}
execute1("create axon[2]", CellRef)

L_real = 0
count = 0

// new axon dependant on old diameters
for i=0,1{
access axon[i]
L =  L_target/2
nseg = nseg_total/2

for (x) {
if (x > 0 && x < 1) {
diam(x) = diams.x[count]
L_real = L_real+lens.x[count]
count = count + 1
}
}

all.append()
axonal.append()

if (i == 0) {
v(0.0001) = i1
} else {
v(0.0001) = i2
}
}

nSecAxonal = 2
soma[0] connect axon[0](0), 1
axon[0] connect axon[1](0), 1

create myelin[1]
access myelin{
L = 1000
diam = diams.x[count-1]
nseg = 5
v(0.0001) = i3
all.append()
myelinated.append()
}
connect myelin(0), axon[1](1)
}
}




func hash_str() {localobj sf strdef right
sf = new StringFunctions()

right = $s1

n_of_c = sf.len(right)

hash = 0
char_int = 0
for i = 0, n_of_c - 1 {
sscanf(right, "%c", & char_int)
hash = (hash * 31 + char_int) % (2 ^ 31 - 1)
sf.right(right, 1)
}

return hash
}

proc re_init_rng() {localobj sf
strdef full_str, name

sf = new StringFunctions()


}


endtemplate cNAC_L6NGC
